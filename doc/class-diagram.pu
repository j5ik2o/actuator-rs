@startuml
class Actor {}
class Props {}
interface Cell {
    self(): ActorRef
    system(): ActorSystem
    systemImpl(): ActorSystemImpl
    start(): this.type
    suspend(): Unit
    resume(causedByFailure: Throwable): Unit
    restart(cause: Throwable): Unit
    stop(): Unit
    #isTerminated(): Boolean
    parent(): InternalActorRef
    childrenRefs(): ChildrenContainer
    getChildByName(name: String): Option[ChildStats]
    getSingleChild(name: String): InternalActorRef
    sendMessage(msg: Envelope): Unit
    sendMessage(message: Any, sender: ActorRef): Unit
    sendSystemMessage(message: SystemMessage): Unit
    isLocal(): Boolean
    hasMessage(): Boolean
    numberOfMessages(): Int
    props(): Props
}
class ActorCell implements Cell {
}
class ActorPath {}
class Address {}

abstract class ActorRef {
    +path(): ActorPath
    +tell(msg: Any, senderRef: ActorRef): Unit
    isTermnated(): Boolean
    hashCode(): Int
    equals(other: Any): Boolean
}

class ActorRefFactory {
    #systemImpl(): ActorSystemImpl
    #provider(): ActorRefProvider
    +dispatcher(): ExecutionContextExecutor
    #guardian(): InternalActorRef
    #lookupRoot(): InternalActorRef
    +actorRef(props: Props, name: Opiton[String]): ActorRef
    +actorSelection(path: ActorPath): ActorSelection
    +stop(actor: ActorRef): Unit
}

interface ActorRefProvider {
    rootGuardian(): InternalActorRef
    rootGuardianAt(address: Address): InternalActorRef
    guardian(): LocalActorRef
    systemGuardian(): LocalActorRef
    deadLetters(): ActorRef
    -ignoreRef(): ActorRef
    rootPath(): ActorPath
    settings(): ActorSystem.Settings
    ~init(system: ActorSystemImpl): Unit
    deployer(): Deployer
    tempPath(): ActorPath
    tempPath(prefix: String): ActorPath
    tempContainer(): InternalActorRef
    ~registerTempActor(actorRef: InternalActorRef, path: ActorPath): Unit
    #actorOf(system: ActorSystemImpl, props: Props, supervisor: InternalActorRef, path: ActorPath, systemService: Boolean, deploy: Option[Deploy]): InternalActorRef
    resolveActorRef(path: String): ActorRef
    resolveActorRef(path: ActorPath): ActorRef
    terminationFuture(): Future[ActorRef]
    getExternalAddressFor(address: Address): Option[Address]
    getDefualtAddress(): Address
    #serializationInformation: SerializationInformation
    #addressString: String
}
abstract class ActorSystem implements ActorRefFactory {
    name(): String
    settigs(): Settings
    logConfiguration(): Unit
    /(name: String): ActorPath
    child(child: String): ActorPath
    /(name: Iterable[String]): ActorPath
    descendant(names: Iterable[String]): ActorPath
    startTime(): Long
    uptime(): Long
    eventStream: EventStream
    log: LoggingAdapter
    deadLetters(): ActorRef
    scheduler: Scheduler
    dispatchers: Dispatchers
    dispatcher: ExecutionContextExecutor
    mailboxes: Mailboxes
    registerOnTermination[T](code: => T): Unit
    registerOnTermination(code: Runnable): Unit
    terminate(): Unit
    whenTerminated: Future[Unit]
    registerExtension[T <: Extension](ext: T): T
    extension[T <: Extension](key: ExtensionId[T]): T
    hasExtension(key: ExtensionId[_ <: Extension]): Boolean
}
class ActorSystemImpl extends ActorSystem {}
package "akka" {
abstract class InternalActorRef extends ActorRef {
    start(): Unit
    resume(casuedByFailure: Throwable): Unit
    suspend(): Unit
    restart(cause: Throwable): Unit
    stop(): Unit
    sendSystemMessage(message: SystemMessage): Unit

    provider(): ActorRefProvider
    parent(): InternalActorRef
    getChild(name: String): InternalActorRef

    isLocal: Boolean
    #isTerminated: Boolean
}
abstract class ActorRefWithCell extends InternalActorRef {
    underling(): Cell
    children(): Iterable[ActorRef]
    getSingleChild(name: String): InternalActorRef
}
class LocalActorRef extends ActorRefWithCell {}
    val actorCall: ActorCell
}
ActorRefFactory -> ActorRefProvider
ActorRefFactory -> ActorSystemImpl

@enduml